<?php
/**
 * 在尽量保持正交性的同时, 将系统事件通知到各个不同组件
 */

/**
 * 问题: 在某一事件发生时, 需要很多相关操作被执行
 *   S1: 硬编码
 *     P1: 破坏设计, 难以移植到其他系统
 *   S2: 观察者模式(1): 将客户元素(观察者)和中心类(主题)分离出来
 *     P2 -> S3, S4, S5, S6
 *   S3: 扩展 Observable 接口, 并在其中添加 getStatus() 方法
 *   S4: 扩展 Observable 接口, 将其重命名为 ObservableLogin 这样的名称, 说明是 Login 对象
 *   S5: 由 Observer 类负责保证它们的主体是正确的类型
 *   S6: 同上, 但是使用 SPL
 *   S7: 通过 update() 方法传递特定的状态信息, 而不是传递猪蹄类的对象实例
 *   S8: 严格限定类型, 让 Login 类拒绝与其他任何类型一起工作, 只接受观察这类的具体类型
 *       如 LoginObserver
 */