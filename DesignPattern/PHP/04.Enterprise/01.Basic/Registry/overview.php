<?php
/**
 * 大多数要讲的企业模式都只能用在某个层, 但注册表是个例外
 *
 * 注册表的作用时提供系统级别的对象访问功能
 */

/**
 * 问题: 系统的分层结构使每个层都只通过相邻的层交流, 但你需要在一个层中获得不相邻的另一个
 *       层所需要的信息时, 该怎么办呢?
 *   S1: 通过各个层的对象传递
 *   S2: ?修改所有对象的接口, 判断上下文对象是否是它们需要的?
 *   S3: 使用注册表(基于类方法)
 *   S4: 使用注册表(基于键值对)
 *   S5: 使用注册表(作为数据对象工厂)
 *   S6: 使用注册表(用于测试)
 *   S7: 使用注册表(不同的作用域)
 */

/**
 * 注意:
 *   - 你要自己想办法在序列化时处理句柄, 并在反序列化时重新搜取句柄
 *   - 要小心所保存的内容: 一个很简单的对象可能包含了一个指向其他庞大对象的引用
 *   - 最好不要存储过多数据, 里面的数据集合也要经过良好定义
 */