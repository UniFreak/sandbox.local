<?php
/**
 * 如果你想像对待单个对象一样对待组合对象, 组合模式十分有用
 */

/**
 * 需求:
 *   - 灵活管理一组本身可能还包含本身的对象
 *   - 组合对象和局部(叶子)对象拥有相同的操作, 对于客户端来说看起来无异
 *   - 组合对象又有自己添加和删除局部对象的操作
 */

/**
 * 问题: 如何实现 add/remove 操作
 *   - S1: 组合模式(强制子类实现并报异常)
 *   - S2: 组合模式(异常放入基类)
 *   - S3: 组合模式(加入组合基类)
 */

/**
 * 结果:
 *   pros:
 *   - 灵活
 *   - 简单: 客户端无需区分对象是组合对象还是叶子对象(除了在添加新组件时);
 *     组合结构的所有复杂性都被隐藏了(如计算 bombardStrength)
 *   - ??隐式到达??:
 *   - ??显示到达??: 树形结构可轻松遍历, 以获取子对象信息, 或对其执行批量处理
 *   cons:
 *   - 简化的好处有时会以降低对象类型安全为代价
 *     模型变得复杂时, 你就不得不手动进行越多的类型检查(如 S3 的 TroopCarrier)
 *     --> 在大部分局部对象可互换的情况下, 组合模式才最适用
 *   - 组合操作的成本(如 Army::bombardStrength)可能会很大, 影响性能
 *     --> 考虑在父级对象中缓存计算结果
 *   - 对象组合关系很难持久化到关系数据库里
 *     --> 考虑使用 XML
 */
