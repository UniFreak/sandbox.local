<?php
/**
 * 装饰模式可以让你在运行时灵活的合并对象以扩展功能
 *
 * 组合模式 vs 装饰模式
 *   - 组合模式帮助我们聚合组件, 而装饰模式则使用类似结构来帮助我们改变具体组件的功能
 *   - 都体现了组合的重要性, 但装饰模式的组合实在代码运行时实现的
 */

/**
 * 问题:
 *   - 功能定义完全依赖于继承体系会导致类的数量过多
 *   - 也会产生代码重复
 * 方案: 使用组合和委托, 而不单使用继承来解决功能变化
 *   - S1: 装饰模式(装饰类与其中拥有的对象共享相同的对象类型)
 *   - S2: 装饰模式(装饰类与其中拥有的对象不是相同的对象类型)
 */

/**
 * 结果:
 *   pros:
 *   - 极具扩展性. 可以很轻松的添加新的组件或装饰器
 *   - 管道对于创建过滤器非常有用
 *   - 在运行时灵活的合并对象
 *   cons:
 *   - 如果一个基类具有大量特性(方法很多), 那么装饰对象不得不为他们包装的对象的所有 public 方法加上委托
 */

/**
 * 注意:
 *   - 保持基类中的方法尽可能少是很重要的
 */